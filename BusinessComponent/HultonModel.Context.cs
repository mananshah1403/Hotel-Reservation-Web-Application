//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessComponent
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelTransylvaniaEntities : DbContext
    {
        public HotelTransylvaniaEntities()
            : base("name=HotelTransylvaniaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BREAKFAST> BREAKFASTs { get; set; }
        public virtual DbSet<BREAKFAST_REVIEW> BREAKFAST_REVIEW { get; set; }
        public virtual DbSet<CREDIT_CARD> CREDIT_CARD { get; set; }
        public virtual DbSet<CUSTOMER> CUSTOMERs { get; set; }
        public virtual DbSet<DISCOUNTED_ROOM> DISCOUNTED_ROOM { get; set; }
        public virtual DbSet<HOTEL> HOTELs { get; set; }
        public virtual DbSet<RESERVATION> RESERVATIONs { get; set; }
        public virtual DbSet<ROOM> ROOMs { get; set; }
        public virtual DbSet<ROOM_RESERVATION> ROOM_RESERVATION { get; set; }
        public virtual DbSet<ROOM_REVIEW> ROOM_REVIEW { get; set; }
        public virtual DbSet<RRESV_BREAKFAST> RRESV_BREAKFAST { get; set; }
        public virtual DbSet<RRESV_SERVICE> RRESV_SERVICE { get; set; }
        public virtual DbSet<SERVICE> SERVICEs { get; set; }
        public virtual DbSet<SERVICE_REVIEW> SERVICE_REVIEW { get; set; }
    
        public virtual int SP_GET_AVAILABLE_ROOM_BY_FLOOR(Nullable<int> floorNum, string roomType, Nullable<int> hotelID, ObjectParameter availableRooms)
        {
            var floorNumParameter = floorNum.HasValue ?
                new ObjectParameter("FloorNum", floorNum) :
                new ObjectParameter("FloorNum", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GET_AVAILABLE_ROOM_BY_FLOOR", floorNumParameter, roomTypeParameter, hotelIDParameter, availableRooms);
        }
    
        public virtual ObjectResult<string> SP_GET_COUNTRIES()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GET_COUNTRIES");
        }
    
        public virtual ObjectResult<Nullable<int>> SP_GET_FLOORS(string roomType, Nullable<int> hotelID)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GET_FLOORS", roomTypeParameter, hotelIDParameter);
        }
    
        public virtual ObjectResult<SP_GET_HOTEL_Result> SP_GET_HOTEL(string country, string state)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_HOTEL_Result>("SP_GET_HOTEL", countryParameter, stateParameter);
        }
    
        public virtual ObjectResult<SP_GET_ROOM_DETAILS_Result> SP_GET_ROOM_DETAILS(string roomType, Nullable<int> hotelID)
        {
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GET_ROOM_DETAILS_Result>("SP_GET_ROOM_DETAILS", roomTypeParameter, hotelIDParameter);
        }
    
        public virtual int SP_GET_ROOM_PRICE_BY_FLOOR(Nullable<int> floorNum, string roomType, Nullable<int> hotelID, ObjectParameter rPrice)
        {
            var floorNumParameter = floorNum.HasValue ?
                new ObjectParameter("FloorNum", floorNum) :
                new ObjectParameter("FloorNum", typeof(int));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GET_ROOM_PRICE_BY_FLOOR", floorNumParameter, roomTypeParameter, hotelIDParameter, rPrice);
        }
    
        public virtual ObjectResult<string> SP_GET_ROOM_TYPES(Nullable<int> hotelID)
        {
            var hotelIDParameter = hotelID.HasValue ?
                new ObjectParameter("HotelID", hotelID) :
                new ObjectParameter("HotelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GET_ROOM_TYPES", hotelIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GET_ZIPCODES(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GET_ZIPCODES", countryParameter);
        }
    
        public virtual int SP_INSERT_CUSTOMER_RECORD(string fName, string mName, string lName, string address, Nullable<int> phoneNo, string email, string password, ObjectParameter custID)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneNoParameter = phoneNo.HasValue ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_CUSTOMER_RECORD", fNameParameter, mNameParameter, lNameParameter, addressParameter, phoneNoParameter, emailParameter, passwordParameter, custID);
        }
    
        public virtual int SP_INSERT_HOTEL_RECORD(string street, string country, string state, string zip, ObjectParameter hotelID)
        {
            var streetParameter = street != null ?
                new ObjectParameter("Street", street) :
                new ObjectParameter("Street", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERT_HOTEL_RECORD", streetParameter, countryParameter, stateParameter, zipParameter, hotelID);
        }
    }
}
